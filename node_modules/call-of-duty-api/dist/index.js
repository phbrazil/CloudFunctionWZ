"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disableDebugMode = exports.enableDebugMode = exports.Misc = exports.Me = exports.Store = exports.Vanguard = exports.ColdWar = exports.ModernWarfare2 = exports.ModernWarfare = exports.Warzone = exports.friendActions = exports.platforms = exports.login = void 0;
const tslib_1 = require("tslib");
const undici_1 = require("undici");
const weapon_ids_json_1 = tslib_1.__importDefault(require("./wz-data/weapon-ids.json"));
const game_modes_json_1 = tslib_1.__importDefault(require("./wz-data/game-modes.json"));
const userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36";
let baseCookie = "new_SiteId=cod;ACT_SSO_LOCALE=en_US;country=US;";
let baseSsoToken = '';
let debugMode = false;
;
let baseHeaders = {
    'content-type': 'application/json',
    'cookie': baseCookie,
    'user-agent': userAgent
};
let basePostHeaders = {
    'content-type': 'text/plain',
    'cookie': baseCookie,
    'user-agent': userAgent
};
let baseUrl = "https://my.callofduty.com";
let apiPath = "/api/papi-client";
let loggedIn = false;
var platforms;
(function (platforms) {
    platforms["All"] = "all";
    platforms["Activision"] = "acti";
    platforms["Battlenet"] = "battle";
    platforms["PSN"] = "psn";
    platforms["Steam"] = "steam";
    platforms["Uno"] = "uno";
    platforms["XBOX"] = "xbl";
})(platforms || (platforms = {}));
exports.platforms = platforms;
;
var friendActions;
(function (friendActions) {
    friendActions["Invite"] = "invite";
    friendActions["Uninvite"] = "uninvite";
    friendActions["Remove"] = "remove";
    friendActions["Block"] = "block";
    friendActions["Unblock"] = "unblock";
})(friendActions || (friendActions = {}));
exports.friendActions = friendActions;
var generics;
(function (generics) {
    generics["STEAM_UNSUPPORTED"] = "Steam platform not supported by this game. Try `battle` instead.";
})(generics || (generics = {}));
const enableDebugMode = () => debugMode = true;
exports.enableDebugMode = enableDebugMode;
const disableDebugMode = () => debugMode = false;
exports.disableDebugMode = disableDebugMode;
const sendRequest = (url) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        if (!loggedIn)
            throw new Error("Not Logged In.");
        let requestUrl = `${baseUrl}${apiPath}${url}`;
        if (debugMode)
            console.time("Round Trip");
        const { body, statusCode } = yield (0, undici_1.request)(requestUrl, {
            headers: baseHeaders
        });
        if (debugMode)
            console.timeEnd("Round Trip");
        let response = yield body.json();
        if (debugMode) {
            console.log(`[DEBUG]`, `Request Uri: ${requestUrl}`);
            console.log(`[DEBUG]`, `Body Size: ${JSON.stringify(response).length} bytes.`);
        }
        if (statusCode > 299)
            return response;
        return response;
    }
    catch (exception) {
        throw exception;
    }
});
const sendPostRequest = (url, data) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        if (!loggedIn)
            throw new Error("Not Logged In.");
        let requestUrl = `${baseUrl}${apiPath}${url}`;
        const { body, statusCode } = yield (0, undici_1.request)(requestUrl, {
            method: 'POST',
            headers: basePostHeaders,
            body: data
        });
        let response = yield body.json();
        if (statusCode > 299)
            return response;
        return response;
    }
    catch (exception) {
        throw exception;
    }
});
const cleanClientName = (gamertag) => {
    return encodeURIComponent(gamertag);
};
const login = (ssoToken) => {
    if (!ssoToken || ssoToken.trim().length <= 0)
        return false;
    let fakeXSRF = "68e8b62e-1d9d-4ce1-b93f-cbe5ff31a041";
    baseHeaders["X-XSRF-TOKEN"] = fakeXSRF;
    baseHeaders["X-CSRF-TOKEN"] = fakeXSRF;
    baseHeaders["Atvi-Auth"] = ssoToken;
    baseHeaders["ACT_SSO_COOKIE"] = ssoToken;
    baseHeaders["atkn"] = ssoToken;
    baseHeaders["cookie"] = `${baseCookie}ACT_SSO_COOKIE=${ssoToken};XSRF-TOKEN=${fakeXSRF};API_CSRF_TOKEN=${fakeXSRF};ACT_SSO_EVENT="LOGIN_SUCCESS:1644346543228";ACT_SSO_COOKIE_EXPIRY=1645556143194;comid=cod;ssoDevId=63025d09c69f47dfa2b8d5520b5b73e4;tfa_enrollment_seen=true;gtm.custom.bot.flag=human;`;
    baseSsoToken = ssoToken;
    basePostHeaders["X-XSRF-TOKEN"] = fakeXSRF;
    basePostHeaders["X-CSRF-TOKEN"] = fakeXSRF;
    basePostHeaders["Atvi-Auth"] = ssoToken;
    basePostHeaders["ACT_SSO_COOKIE"] = ssoToken;
    basePostHeaders["atkn"] = ssoToken;
    basePostHeaders["cookie"] = `${baseCookie}ACT_SSO_COOKIE=${ssoToken};XSRF-TOKEN=${fakeXSRF};API_CSRF_TOKEN=${fakeXSRF};ACT_SSO_EVENT="LOGIN_SUCCESS:1644346543228";ACT_SSO_COOKIE_EXPIRY=1645556143194;comid=cod;ssoDevId=63025d09c69f47dfa2b8d5520b5b73e4;tfa_enrollment_seen=true;gtm.custom.bot.flag=human;`;
    loggedIn = true;
    return loggedIn;
};
exports.login = login;
const handleLookupType = (platform) => {
    console.log("handleLookupType ++++++++++++++++")
    //this is a bug that dont make sense
    //return platform === platforms.Uno ? 'id' : 'gamer';
    return 'gamer';
};
const mapGamertagToPlatform = (gamertag, platform, steamSupport = false) => {
    const lookupType = handleLookupType(platform);
    if (!steamSupport && platform === platforms.Steam)
        throw new Error(generics.STEAM_UNSUPPORTED);
    if (platform == platforms.Battlenet || platform == platforms.Activision || platform == platforms.Uno)
        if (gamertag && gamertag.length > 0)
            gamertag = cleanClientName(gamertag);
    if (platform === platforms.Uno || platform === platforms.Activision)
        platform = platforms.Uno;
    return { gamertag, _platform: platform, lookupType };
};
class WZ {
    constructor() {
        this.fullData = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/stats/cod/v1/title/mw/platform/${platform}/${lookupType}/${gamertag}/profile/type/wz`);
        }); };
        this.combatHistory = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/${lookupType}/${gamertag}/matches/wz/start/0/end/0/details`);
        }); };
        this.combatHistoryWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/${lookupType}/${gamertag}/matches/wz/start/${startTime}/end/${endTime}/details`);
        }); };
        this.breakdown = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/${lookupType}/${gamertag}/matches/wz/start/0/end/0`);
        }); };
        this.breakdownWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/${lookupType}/${gamertag}/matches/wz/start/${startTime}/end/${endTime}`);
        }); };
        this.matchInfo = (matchId, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform("", platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/fullMatch/wz/${matchId}/en`);
        }); };
        this.cleanGameMode = (mode) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            //@ts-ignore
            const foundMode = game_modes_json_1.default["modes"][mode];
            if (!foundMode)
                return mode;
            return foundMode;
        });
    }
}
class MW {
    constructor() {
        this.fullData = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/stats/cod/v1/title/mw/platform/${platform}/${lookupType}/${gamertag}/profile/type/mp`);
        }); };
        this.combatHistory = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/0/end/0/details`);
        }); };
        this.combatHistoryWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/${startTime}/end/${endTime}/details`);
        }); };
        this.breakdown = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/0/end/0`);
        }); };
        this.breakdownWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/${startTime}/end/${endTime}`);
        }); };
        this.seasonloot = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/loot/title/mw/platform/${platform}/${lookupType}/${gamertag}/status/en`);
        }); };
        this.mapList = (platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/ce/v1/title/mw/platform/${platform}/gameType/mp/communityMapData/availability`);
        }); };
        this.matchInfo = (matchId, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/mw/platform/${platform}/fullMatch/mp/${matchId}/en`);
        }); };
    }
}
class MW2 {
    constructor() {
        this.fullData = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform, true));
            return yield sendRequest(`/stats/cod/v1/title/mw2/platform/${platform}/${lookupType}/${gamertag}/profile/type/mp`);
        }); };
        this.combatHistory = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform, true));
            return yield sendRequest(`/crm/cod/v2/title/mw2/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/0/end/0/details`);
        }); };
        this.combatHistoryWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform, true));
            return yield sendRequest(`/crm/cod/v2/title/mw2/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/${startTime}/end/${endTime}/details`);
        }); };
        this.breakdown = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform, true));
            return yield sendRequest(`/crm/cod/v2/title/mw2/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/0/end/0`);
        }); };
        this.breakdownWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform, true));
            return yield sendRequest(`/crm/cod/v2/title/mw2/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/${startTime}/end/${endTime}`);
        }); };
        this.seasonloot = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform, true));
            return yield sendRequest(`/loot/title/mw2/platform/${platform}/${lookupType}/${gamertag}/status/en`);
        }); };
        this.mapList = (platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform, true));
            return yield sendRequest(`/ce/v1/title/mw2/platform/${platform}/gameType/mp/communityMapData/availability`);
        }); };
        this.matchInfo = (matchId, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform, true));
            return yield sendRequest(`/crm/cod/v2/title/mw2/platform/${platform}/fullMatch/mp/${matchId}/en`);
        }); };
    }
}
class CW {
    constructor() {
        this.fullData = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/stats/cod/v1/title/cw/platform/${platform}/${lookupType}/${gamertag}/profile/type/mp`);
        }); };
        this.combatHistory = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/cw/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/0/end/0/details`);
        }); };
        this.combatHistoryWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/cw/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/${startTime}/end/${endTime}/details`);
        }); };
        this.breakdown = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/cw/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/0/end/0`);
        }); };
        this.breakdownWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/cw/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/${startTime}/end/${endTime}`);
        }); };
        this.seasonloot = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/loot/title/cw/platform/${platform}/${lookupType}/${gamertag}/status/en`);
        }); };
        this.mapList = (platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/ce/v1/title/cw/platform/${platform}/gameType/mp/communityMapData/availability`);
        }); };
        this.matchInfo = (matchId, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/cw/platform/${platform}/fullMatch/mp/${matchId}/en`);
        }); };
    }
}
class VG {
    constructor() {
        this.fullData = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/stats/cod/v1/title/vg/platform/${platform}/${lookupType}/${gamertag}/profile/type/mp`);
        }); };
        this.combatHistory = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/vg/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/0/end/0/details`);
        }); };
        this.combatHistoryWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/vg/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/${startTime}/end/${endTime}/details`);
        }); };
        this.breakdown = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/vg/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/0/end/0`);
        }); };
        this.breakdownWithDate = (gamertag, startTime, endTime, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/vg/platform/${platform}/${lookupType}/${gamertag}/matches/mp/start/${startTime}/end/${endTime}`);
        }); };
        this.seasonloot = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/loot/title/vg/platform/${platform}/${lookupType}/${gamertag}/status/en`);
        }); };
        this.mapList = (platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/ce/v1/title/vg/platform/${platform}/gameType/mp/communityMapData/availability`);
        }); };
        this.matchInfo = (matchId, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/title/vg/platform/${platform}/fullMatch/mp/${matchId}/en`);
        }); };
    }
}
class SHOP {
    constructor() {
        this.purchasableItems = (gameId) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield sendRequest(`/inventory/v1/title/${gameId}/platform/psn/purchasable/public/en`);
        });
        this.bundleInformation = (title, bundleId) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield sendRequest(`/inventory/v1/title/${title}/bundle/${bundleId}/en`);
        });
        this.battlePassLoot = (season, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/loot/title/mw/platform/${platform}/list/loot_season_${season}/en`);
        }); };
    }
}
class USER {
    constructor() {
        this.friendFeed = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/userfeed/v1/friendFeed/platform/${platform}/gamer/${gamertag}/friendFeedEvents/en`);
        }); };
        this.eventFeed = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield sendRequest(`/userfeed/v1/friendFeed/rendered/en/${baseSsoToken}`);
        });
        this.loggedInIdentities = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield sendRequest(`/crm/cod/v2/identities/${baseSsoToken}`);
        });
        this.codPoints = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/inventory/v1/title/mw/platform/${platform}/gamer/${gamertag}/currency`);
        }); };
        this.connectedAccounts = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/accounts/platform/${platform}/${lookupType}/${gamertag}`);
        }); };
        this.settings = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/preferences/v1/platform/${platform}/gamer/${gamertag}/list`);
        }); };
        this.friendAction = (gamertag, platform, action) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            var url = `/codfriends/v1/${action}/${platform}/${lookupType}/${gamertag}`;
            return yield sendPostRequest(url, "{}");
        }); };
    }
}
class ALT {
    constructor() {
        this.search = (gamertag, platform) => { var gamertag, platform, lookupType; return tslib_1.__awaiter(this, void 0, void 0, function* () {
            ({ gamertag, _platform: platform, lookupType } = mapGamertagToPlatform(gamertag, platform));
            return yield sendRequest(`/crm/cod/v2/platform/${platform}/username/${gamertag}/search`);
        }); };
        this.cleanWeapon = (weapon) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            //@ts-ignore
            const foundWeapon = weapon_ids_json_1.default["All Weapons"][weapon];
            if (!foundWeapon)
                return weapon;
            return foundWeapon;
        });
    }
}
const Warzone = new WZ();
exports.Warzone = Warzone;
const ModernWarfare = new MW();
exports.ModernWarfare = ModernWarfare;
const ModernWarfare2 = new MW2();
exports.ModernWarfare2 = ModernWarfare2;
const ColdWar = new CW();
exports.ColdWar = ColdWar;
const Vanguard = new VG();
exports.Vanguard = Vanguard;
const Store = new SHOP();
exports.Store = Store;
const Me = new USER();
exports.Me = Me;
const Misc = new ALT();
exports.Misc = Misc;
//# sourceMappingURL=index.js.map